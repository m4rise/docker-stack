version: '3.9'

networks:
  traefik:
    external: true
  docker-socket-proxy:
    external: true

services:

  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    command: -H tcp://docker-socket-proxy:2375 --http-enabled
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - portainer_data:/data
    labels:
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`portainer.localhost`)
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.tls: true
      traefik.http.services.portainer.loadbalancer.server.port: 9000
    networks:
      - traefik
      - docker-socket-proxy

#   adminer:
#     container_name: adminer
#     image: adminer
#     restart: always
#     labels:
#       traefik.enable: true
#       traefik.http.routers.adminer.rule: Host(`adminer.localhost`)
#       traefik.http.routers.adminer.entrypoints: websecure
#       traefik.http.routers.adminer.tls: true
#       traefik.http.routers.adminer.middlewares: authtraefik@file
#     networks:
#       - traefik

#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: phpmyadmin
#     restart: always
#     external_links:
#       - mysql
#     environment:
#       PMA_HOST: mysql
#       PMA_PORT: 3306
#     volumes:
#       - /sessions
#     labels:
#       traefik.enable: true
#       traefik.http.routers.pma.rule: Host(`phpmyadmin.localhost`)
#       traefik.http.routers.pma.entrypoints: websecure
#       traefik.http.routers.pma.tls: true
#       traefik.http.routers.pma.middlewares: authtraefik@file
#     networks:
#       - traefik

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    labels:
      traefik.enable: true
      traefik.http.routers.pgadmin.rule: Host(`pgadmin.localhost`)
      traefik.http.routers.pgadmin.entrypoints: websecure
      traefik.http.routers.pgadmin.tls: true
      traefik.http.services.pgadmin.loadbalancer.server.port: 80
    volumes:
      - /var/lib/pgadmin
    networks:
      - traefik

  inbucket:
    container_name: inbucket
    image: inbucket/inbucket:stable
    restart: always
    environment:
      INBUCKET_LOGLEVEL: "debug"
      INBUCKET_SMTP_ADDR: "0.0.0.0:2500"
      INBUCKET_POP3_ADDR: "0.0.0.0:1100"
      INBUCKET_WEB_ADDR: "0.0.0.0:9000"
      INBUCKET_STORAGE_TYPE: "file"
      INBUCKET_STORAGE_PARAMS: "path:/tmp/inbucket"
    volumes:
      - ./data/inbucket:/tmp/inbucket
    labels:
      traefik.enable: true
      traefik.http.routers.inbucket.rule: Host(`inbucket.localhost`)
      traefik.http.routers.inbucket.entrypoints: websecure
      traefik.http.routers.inbucket.tls: true
      traefik.http.services.inbucket.loadbalancer.server.port: 9000
    networks:
      - traefik

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    labels:
      traefik.enable: true
      traefik.http.routers.prometheus.rule: Host(`prometheus.localhost`)
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.tls: true
      traefik.http.routers.prometheus.middlewares: authtraefik@file
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
    networks:
      - traefik

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.tls: true
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    networks:
      - traefik

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - traefik

  # Development tools
  code-server:
    image: codercom/code-server:latest
    container_name: code-server
    restart: always
    environment:
      PASSWORD: ${CODE_SERVER_PASSWORD:-development}
    volumes:
      - code_server_data:/home/coder
      - ${PROJECTS_DIR:-../../projects}:/home/coder/projects
    labels:
      traefik.enable: true
      traefik.http.routers.code-server.rule: Host(`code.localhost`)
      traefik.http.routers.code-server.entrypoints: websecure
      traefik.http.routers.code-server.tls: true
      traefik.http.services.code-server.loadbalancer.server.port: 8080
    networks:
      - traefik

  # API Testing
  httpbin:
    image: kennethreitz/httpbin
    container_name: httpbin
    restart: always
    labels:
      traefik.enable: true
      traefik.http.routers.httpbin.rule: Host(`httpbin.localhost`)
      traefik.http.routers.httpbin.entrypoints: websecure
      traefik.http.routers.httpbin.tls: true
      traefik.http.services.httpbin.loadbalancer.server.port: 80
    networks:
      - traefik

  # API Testing & Documentation
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    restart: always
    environment:
      SWAGGER_JSON_URL: "https://petstore.swagger.io/v2/swagger.json"
    labels:
      traefik.enable: true
      traefik.http.routers.swagger.rule: Host(`swagger.localhost`)
      traefik.http.routers.swagger.entrypoints: websecure
      traefik.http.routers.swagger.tls: true
      traefik.http.services.swagger.loadbalancer.server.port: 8080
    networks:
      - traefik

  # API Mock Server
  mockserver:
    image: mockserver/mockserver:latest
    container_name: mockserver
    restart: always
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializerJson.json
    volumes:
      - ./config/mockserver:/config
    labels:
      traefik.enable: true
      traefik.http.routers.mockserver.rule: Host(`mock.localhost`)
      traefik.http.routers.mockserver.entrypoints: websecure
      traefik.http.routers.mockserver.tls: true
      traefik.http.services.mockserver.loadbalancer.server.port: 1080
    networks:
      - traefik

volumes:
  portainer_data:
  prometheus_data:
  grafana_data:
  code_server_data:
